{"version":3,"sources":["/home/jared/Desktop/funCode/node_modules/acorn/src/lval.js"],"names":[],"mappings":"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","file":"lval-compiled.js","sourcesContent":["import {types as tt} from \"./tokentype\"\nimport {Parser} from \"./state\"\nimport {reservedWords} from \"./identifier\"\nimport {has} from \"./util\"\n\nconst pp = Parser.prototype\n\n// Convert existing expression atom to assignable pattern\n// if possible.\n\npp.toAssignable = function(node, isBinding) {\n  if (this.options.ecmaVersion >= 6 && node) {\n    switch (node.type) {\n    case \"Identifier\":\n    case \"ObjectPattern\":\n    case \"ArrayPattern\":\n    case \"AssignmentPattern\":\n      break\n\n    case \"ObjectExpression\":\n      node.type = \"ObjectPattern\"\n      for (let i = 0; i < node.properties.length; i++) {\n        let prop = node.properties[i]\n        if (prop.kind !== \"init\") this.raise(prop.key.start, \"Object pattern can't contain getter or setter\")\n        this.toAssignable(prop.value, isBinding)\n      }\n      break\n\n    case \"ArrayExpression\":\n      node.type = \"ArrayPattern\"\n      this.toAssignableList(node.elements, isBinding)\n      break\n\n    case \"AssignmentExpression\":\n      if (node.operator === \"=\") {\n        node.type = \"AssignmentPattern\"\n      } else {\n        this.raise(node.left.end, \"Only '=' operator can be used for specifying default value.\")\n      }\n      break\n\n    case \"MemberExpression\":\n      if (!isBinding) break\n\n    default:\n      this.raise(node.start, \"Assigning to rvalue\")\n    }\n  }\n  return node\n}\n\n// Convert list of expression atoms to binding list.\n\npp.toAssignableList = function(exprList, isBinding) {\n  let end = exprList.length\n  if (end) {\n    let last = exprList[end - 1]\n    if (last && last.type == \"RestElement\") {\n      --end\n    } else if (last && last.type == \"SpreadElement\") {\n      last.type = \"RestElement\"\n      let arg = last.argument\n      this.toAssignable(arg, isBinding)\n      if (arg.type !== \"Identifier\" && arg.type !== \"MemberExpression\" && arg.type !== \"ArrayPattern\")\n        this.unexpected(arg.start)\n      --end\n    }\n  }\n  for (let i = 0; i < end; i++) {\n    let elt = exprList[i]\n    if (elt) this.toAssignable(elt, isBinding)\n  }\n  return exprList\n}\n\n// Parses spread element.\n\npp.parseSpread = function(refShorthandDefaultPos) {\n  let node = this.startNode()\n  this.next()\n  node.argument = this.parseMaybeAssign(refShorthandDefaultPos)\n  return this.finishNode(node, \"SpreadElement\")\n}\n\npp.parseRest = function() {\n  let node = this.startNode()\n  this.next()\n  node.argument = this.type === tt.name || this.type === tt.bracketL ? this.parseBindingAtom() : this.unexpected()\n  return this.finishNode(node, \"RestElement\")\n}\n\n// Parses lvalue (assignable) atom.\n\npp.parseBindingAtom = function() {\n  if (this.options.ecmaVersion < 6) return this.parseIdent()\n  switch (this.type) {\n  case tt.name:\n    return this.parseIdent()\n\n  case tt.bracketL:\n    let node = this.startNode()\n    this.next()\n    node.elements = this.parseBindingList(tt.bracketR, true, true)\n    return this.finishNode(node, \"ArrayPattern\")\n\n  case tt.braceL:\n    return this.parseObj(true)\n\n  default:\n    this.unexpected()\n  }\n}\n\npp.parseBindingList = function(close, allowEmpty, allowTrailingComma) {\n  let elts = [], first = true\n  while (!this.eat(close)) {\n    if (first) first = false\n    else this.expect(tt.comma)\n    if (allowEmpty && this.type === tt.comma) {\n      elts.push(null)\n    } else if (allowTrailingComma && this.afterTrailingComma(close)) {\n      break\n    } else if (this.type === tt.ellipsis) {\n      elts.push(this.parseRest())\n      this.expect(close)\n      break\n    } else {\n      elts.push(this.parseMaybeDefault())\n    }\n  }\n  return elts\n}\n\n// Parses assignment pattern around given atom if possible.\n\npp.parseMaybeDefault = function(startPos, left) {\n  startPos = startPos || this.markPosition()\n  left = left || this.parseBindingAtom()\n  if (!this.eat(tt.eq)) return left\n  let node = this.startNodeAt(startPos)\n  node.operator = \"=\"\n  node.left = left\n  node.right = this.parseMaybeAssign()\n  return this.finishNode(node, \"AssignmentPattern\")\n}\n\n// Verify that a node is an lval — something that can be assigned\n// to.\n\npp.checkLVal = function(expr, isBinding, checkClashes) {\n  switch (expr.type) {\n  case \"Identifier\":\n    if (this.strict && (reservedWords.strictBind(expr.name) || reservedWords.strict(expr.name)))\n      this.raise(expr.start, (isBinding ? \"Binding \" : \"Assigning to \") + expr.name + \" in strict mode\")\n    if (checkClashes) {\n      if (has(checkClashes, expr.name))\n        this.raise(expr.start, \"Argument name clash in strict mode\")\n      checkClashes[expr.name] = true\n    }\n    break\n\n  case \"MemberExpression\":\n    if (isBinding) this.raise(expr.start, (isBinding ? \"Binding\" : \"Assigning to\") + \" member expression\")\n    break\n\n  case \"ObjectPattern\":\n    for (let i = 0; i < expr.properties.length; i++)\n      this.checkLVal(expr.properties[i].value, isBinding, checkClashes)\n    break\n\n  case \"ArrayPattern\":\n    for (let i = 0; i < expr.elements.length; i++) {\n      let elem = expr.elements[i]\n      if (elem) this.checkLVal(elem, isBinding, checkClashes)\n    }\n    break\n\n  case \"AssignmentPattern\":\n    this.checkLVal(expr.left, isBinding, checkClashes)\n    break\n\n  case \"RestElement\":\n    this.checkLVal(expr.argument, isBinding, checkClashes)\n    break\n\n  default:\n    this.raise(expr.start, (isBinding ? \"Binding\" : \"Assigning to\") + \" rvalue\")\n  }\n}\n"]}