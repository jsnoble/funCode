{"version":3,"sources":["/home/jared/Desktop/funCode/node_modules/acorn/src/loose/tokenize.js"],"names":[],"mappings":"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","file":"tokenize-compiled.js","sourcesContent":["import {tokTypes as tt, Token, isNewLine, SourceLocation, getLineInfo, lineBreakG} from \"..\"\nimport {LooseParser} from \"./state\"\n\nconst lp = LooseParser.prototype\n\nfunction isSpace(ch) {\n  return (ch < 14 && ch > 8) || ch === 32 || ch === 160 || isNewLine(ch)\n}\n\nlp.next = function() {\n  this.last = this.tok\n  if (this.ahead.length)\n    this.tok = this.ahead.shift()\n  else\n    this.tok = this.readToken()\n\n  if (this.tok.start >= this.nextLineStart) {\n    while (this.tok.start >= this.nextLineStart) {\n      this.curLineStart = this.nextLineStart\n      this.nextLineStart = this.lineEnd(this.curLineStart) + 1\n    }\n    this.curIndent = this.indentationAfter(this.curLineStart)\n  }\n}\n\nlp.readToken = function() {\n  for (;;) {\n    try {\n      this.toks.next()\n      if (this.toks.type === tt.dot &&\n          this.input.substr(this.toks.end, 1) === \".\" &&\n          this.options.ecmaVersion >= 6) {\n        this.toks.end++\n        this.toks.type = tt.ellipsis\n      }\n      return new Token(this.toks)\n    } catch(e) {\n      if (!(e instanceof SyntaxError)) throw e\n\n      // Try to skip some text, based on the error message, and then continue\n      let msg = e.message, pos = e.raisedAt, replace = true\n      if (/unterminated/i.test(msg)) {\n        pos = this.lineEnd(e.pos + 1)\n        if (/string/.test(msg)) {\n          replace = {start: e.pos, end: pos, type: tt.string, value: this.input.slice(e.pos + 1, pos)}\n        } else if (/regular expr/i.test(msg)) {\n          let re = this.input.slice(e.pos, pos)\n          try { re = new RegExp(re) } catch(e) {}\n          replace = {start: e.pos, end: pos, type: tt.regexp, value: re}\n        } else if (/template/.test(msg)) {\n          replace = {start: e.pos, end: pos,\n                     type: tt.template,\n                     value: this.input.slice(e.pos, pos)}\n        } else {\n          replace = false\n        }\n      } else if (/invalid (unicode|regexp|number)|expecting unicode|octal literal|is reserved|directly after number/i.test(msg)) {\n        while (pos < this.input.length && !isSpace(this.input.charCodeAt(pos))) ++pos\n      } else if (/character escape|expected hexadecimal/i.test(msg)) {\n        while (pos < this.input.length) {\n          let ch = this.input.charCodeAt(pos++)\n          if (ch === 34 || ch === 39 || isNewLine(ch)) break\n        }\n      } else if (/unexpected character/i.test(msg)) {\n        pos++\n        replace = false\n      } else if (/regular expression/i.test(msg)) {\n        replace = true\n      } else {\n        throw e\n      }\n      this.resetTo(pos)\n      if (replace === true) replace = {start: pos, end: pos, type: tt.name, value: \"âœ–\"}\n      if (replace) {\n        if (this.options.locations)\n          replace.loc = new SourceLocation(\n            this.toks,\n            getLineInfo(this.input, replace.start),\n            getLineInfo(this.input, replace.end))\n        return replace\n      }\n    }\n  }\n}\n\nlp.resetTo = function(pos) {\n  this.toks.pos = pos\n  let ch = this.input.charAt(pos - 1)\n  this.toks.exprAllowed = !ch || /[\\[\\{\\(,;:?\\/*=+\\-~!|&%^<>]/.test(ch) ||\n    /[enwfd]/.test(ch) &&\n    /\\b(keywords|case|else|return|throw|new|in|(instance|type)of|delete|void)$/.test(this.input.slice(pos - 10, pos))\n\n  if (this.options.locations) {\n    this.toks.curLine = 1\n    this.toks.lineStart = lineBreakG.lastIndex = 0\n    let match\n    while ((match = lineBreakG.exec(this.input)) && match.index < pos) {\n      ++this.toks.curLine\n      this.toks.lineStart = match.index + match[0].length\n    }\n  }\n}\n\nlp.lookAhead = function(n) {\n  while (n > this.ahead.length)\n    this.ahead.push(this.readToken())\n  return this.ahead[n - 1]\n}\n"]}