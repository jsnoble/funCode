{"version":3,"sources":["/home/jared/Desktop/funCode/node_modules/acorn/src/loose/statement.js"],"names":[],"mappings":"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","file":"statement-compiled.js","sourcesContent":["import {LooseParser} from \"./state\"\nimport {isDummy} from \"./parseutil\"\nimport {getLineInfo, tokTypes as tt} from \"..\"\n\nconst lp = LooseParser.prototype\n\nlp.parseTopLevel = function() {\n  let node = this.startNodeAt(this.options.locations ? [0, getLineInfo(this.input, 0)] : 0)\n  node.body = []\n  while (this.tok.type !== tt.eof) node.body.push(this.parseStatement())\n  this.last = this.tok\n  if (this.options.ecmaVersion >= 6) {\n    node.sourceType = this.options.sourceType\n  }\n  return this.finishNode(node, \"Program\")\n}\n\nlp.parseStatement = function() {\n  let starttype = this.tok.type, node = this.startNode()\n\n  switch (starttype) {\n  case tt._break: case tt._continue:\n    this.next()\n    let isBreak = starttype === tt._break\n    if (this.semicolon() || this.canInsertSemicolon()) {\n      node.label = null\n    } else {\n      node.label = this.tok.type === tt.name ? this.parseIdent() : null\n      this.semicolon()\n    }\n    return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\")\n\n  case tt._debugger:\n    this.next()\n    this.semicolon()\n    return this.finishNode(node, \"DebuggerStatement\")\n\n  case tt._do:\n    this.next()\n    node.body = this.parseStatement()\n    node.test = this.eat(tt._while) ? this.parseParenExpression() : this.dummyIdent()\n    this.semicolon()\n    return this.finishNode(node, \"DoWhileStatement\")\n\n  case tt._for:\n    this.next()\n    this.pushCx()\n    this.expect(tt.parenL)\n    if (this.tok.type === tt.semi) return this.parseFor(node, null)\n    if (this.tok.type === tt._var || this.tok.type === tt._let || this.tok.type === tt._const) {\n      let init = this.parseVar(true)\n      if (init.declarations.length === 1 && (this.tok.type === tt._in || this.isContextual(\"of\"))) {\n        return this.parseForIn(node, init)\n      }\n      return this.parseFor(node, init)\n    }\n    let init = this.parseExpression(true)\n    if (this.tok.type === tt._in || this.isContextual(\"of\"))\n      return this.parseForIn(node, this.toAssignable(init))\n    return this.parseFor(node, init)\n\n  case tt._function:\n    this.next()\n    return this.parseFunction(node, true)\n\n  case tt._if:\n    this.next()\n    node.test = this.parseParenExpression()\n    node.consequent = this.parseStatement()\n    node.alternate = this.eat(tt._else) ? this.parseStatement() : null\n    return this.finishNode(node, \"IfStatement\")\n\n  case tt._return:\n    this.next()\n    if (this.eat(tt.semi) || this.canInsertSemicolon()) node.argument = null\n    else { node.argument = this.parseExpression(); this.semicolon() }\n    return this.finishNode(node, \"ReturnStatement\")\n\n  case tt._switch:\n    let blockIndent = this.curIndent, line = this.curLineStart\n    this.next()\n    node.discriminant = this.parseParenExpression()\n    node.cases = []\n    this.pushCx()\n    this.expect(tt.braceL)\n\n    let cur\n    while (!this.closes(tt.braceR, blockIndent, line, true)) {\n      if (this.tok.type === tt._case || this.tok.type === tt._default) {\n        let isCase = this.tok.type === tt._case\n        if (cur) this.finishNode(cur, \"SwitchCase\")\n        node.cases.push(cur = this.startNode())\n        cur.consequent = []\n        this.next()\n        if (isCase) cur.test = this.parseExpression()\n        else cur.test = null\n        this.expect(tt.colon)\n      } else {\n        if (!cur) {\n          node.cases.push(cur = this.startNode())\n          cur.consequent = []\n          cur.test = null\n        }\n        cur.consequent.push(this.parseStatement())\n      }\n    }\n    if (cur) this.finishNode(cur, \"SwitchCase\")\n    this.popCx()\n    this.eat(tt.braceR)\n    return this.finishNode(node, \"SwitchStatement\")\n\n  case tt._throw:\n    this.next()\n    node.argument = this.parseExpression()\n    this.semicolon()\n    return this.finishNode(node, \"ThrowStatement\")\n\n  case tt._try:\n    this.next()\n    node.block = this.parseBlock()\n    node.handler = null\n    if (this.tok.type === tt._catch) {\n      let clause = this.startNode()\n      this.next()\n      this.expect(tt.parenL)\n      clause.param = this.toAssignable(this.parseExprAtom(), true)\n      this.expect(tt.parenR)\n      clause.guard = null\n      clause.body = this.parseBlock()\n      node.handler = this.finishNode(clause, \"CatchClause\")\n    }\n    node.finalizer = this.eat(tt._finally) ? this.parseBlock() : null\n    if (!node.handler && !node.finalizer) return node.block\n    return this.finishNode(node, \"TryStatement\")\n\n  case tt._var:\n  case tt._let:\n  case tt._const:\n    return this.parseVar()\n\n  case tt._while:\n    this.next()\n    node.test = this.parseParenExpression()\n    node.body = this.parseStatement()\n    return this.finishNode(node, \"WhileStatement\")\n\n  case tt._with:\n    this.next()\n    node.object = this.parseParenExpression()\n    node.body = this.parseStatement()\n    return this.finishNode(node, \"WithStatement\")\n\n  case tt.braceL:\n    return this.parseBlock()\n\n  case tt.semi:\n    this.next()\n    return this.finishNode(node, \"EmptyStatement\")\n\n  case tt._class:\n    return this.parseClass(true)\n\n  case tt._import:\n    return this.parseImport()\n\n  case tt._export:\n    return this.parseExport()\n\n  default:\n    let expr = this.parseExpression()\n    if (isDummy(expr)) {\n      this.next()\n      if (this.tok.type === tt.eof) return this.finishNode(node, \"EmptyStatement\")\n      return this.parseStatement()\n    } else if (starttype === tt.name && expr.type === \"Identifier\" && this.eat(tt.colon)) {\n      node.body = this.parseStatement()\n      node.label = expr\n      return this.finishNode(node, \"LabeledStatement\")\n    } else {\n      node.expression = expr\n      this.semicolon()\n      return this.finishNode(node, \"ExpressionStatement\")\n    }\n  }\n}\n\nlp.parseBlock = function() {\n  let node = this.startNode()\n  this.pushCx()\n  this.expect(tt.braceL)\n  let blockIndent = this.curIndent, line = this.curLineStart\n  node.body = []\n  while (!this.closes(tt.braceR, blockIndent, line, true))\n    node.body.push(this.parseStatement())\n  this.popCx()\n  this.eat(tt.braceR)\n  return this.finishNode(node, \"BlockStatement\")\n}\n\nlp.parseFor = function(node, init) {\n  node.init = init\n  node.test = node.update = null\n  if (this.eat(tt.semi) && this.tok.type !== tt.semi) node.test = this.parseExpression()\n  if (this.eat(tt.semi) && this.tok.type !== tt.parenR) node.update = this.parseExpression()\n  this.popCx()\n  this.expect(tt.parenR)\n  node.body = this.parseStatement()\n  return this.finishNode(node, \"ForStatement\")\n}\n\nlp.parseForIn = function(node, init) {\n  let type = this.tok.type === tt._in ? \"ForInStatement\" : \"ForOfStatement\"\n  this.next()\n  node.left = init\n  node.right = this.parseExpression()\n  this.popCx()\n  this.expect(tt.parenR)\n  node.body = this.parseStatement()\n  return this.finishNode(node, type)\n}\n\nlp.parseVar = function(noIn) {\n  let node = this.startNode()\n  node.kind = this.tok.type.keyword\n  this.next()\n  node.declarations = []\n  do {\n    let decl = this.startNode()\n    decl.id = this.options.ecmaVersion >= 6 ? this.toAssignable(this.parseExprAtom(), true) : this.parseIdent()\n    decl.init = this.eat(tt.eq) ? this.parseMaybeAssign(noIn) : null\n    node.declarations.push(this.finishNode(decl, \"VariableDeclarator\"))\n  } while (this.eat(tt.comma))\n  if (!node.declarations.length) {\n    let decl = this.startNode()\n    decl.id = this.dummyIdent()\n    node.declarations.push(this.finishNode(decl, \"VariableDeclarator\"))\n  }\n  if (!noIn) this.semicolon()\n  return this.finishNode(node, \"VariableDeclaration\")\n}\n\nlp.parseClass = function(isStatement) {\n  let node = this.startNode()\n  this.next()\n  if (this.tok.type === tt.name) node.id = this.parseIdent()\n  else if (isStatement) node.id = this.dummyIdent()\n  else node.id = null\n  node.superClass = this.eat(tt._extends) ? this.parseExpression() : null\n  node.body = this.startNode()\n  node.body.body = []\n  this.pushCx()\n  let indent = this.curIndent + 1, line = this.curLineStart\n  this.eat(tt.braceL)\n  if (this.curIndent + 1 < indent) { indent = this.curIndent; line = this.curLineStart }\n  while (!this.closes(tt.braceR, indent, line)) {\n    if (this.semicolon()) continue\n    let method = this.startNode(), isGenerator, start\n    if (this.options.ecmaVersion >= 6) {\n      method['static'] = false\n      isGenerator = this.eat(tt.star)\n    }\n    this.parsePropertyName(method)\n    if (isDummy(method.key)) { if (isDummy(this.parseMaybeAssign())) this.next(); this.eat(tt.comma); continue }\n    if (method.key.type === \"Identifier\" && !method.computed && method.key.name === \"static\" &&\n        (this.tok.type != tt.parenL && this.tok.type != tt.braceL)) {\n      method['static'] = true\n      isGenerator = this.eat(tt.star)\n      this.parsePropertyName(method)\n    } else {\n      method['static'] = false\n    }\n    if (this.options.ecmaVersion >= 5 && method.key.type === \"Identifier\" &&\n        !method.computed && (method.key.name === \"get\" || method.key.name === \"set\") &&\n        this.tok.type !== tt.parenL && this.tok.type !== tt.braceL) {\n      method.kind = method.key.name\n      this.parsePropertyName(method)\n      method.value = this.parseMethod(false)\n    } else {\n      if (!method.computed && !method['static'] && !isGenerator && (\n        method.key.type === \"Identifier\" && method.key.name === \"constructor\" ||\n          method.key.type === \"Literal\" && method.key.value === \"constructor\")) {\n        method.kind = \"constructor\"\n      } else {\n        method.kind =  \"method\"\n      }\n      method.value = this.parseMethod(isGenerator)\n    }\n    node.body.body.push(this.finishNode(method, \"MethodDefinition\"))\n  }\n  this.popCx()\n  if (!this.eat(tt.braceR)) {\n    // If there is no closing brace, make the node span to the start\n    // of the next token (this is useful for Tern)\n    this.last.end = this.tok.start\n    if (this.options.locations) this.last.loc.end = this.tok.loc.start\n  }\n  this.semicolon()\n  this.finishNode(node.body, \"ClassBody\")\n  return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\")\n}\n\nlp.parseFunction = function(node, isStatement) {\n  this.initFunction(node)\n  if (this.options.ecmaVersion >= 6) {\n    node.generator = this.eat(tt.star)\n  }\n  if (this.tok.type === tt.name) node.id = this.parseIdent()\n  else if (isStatement) node.id = this.dummyIdent()\n  node.params = this.parseFunctionParams()\n  node.body = this.parseBlock()\n  return this.finishNode(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\")\n}\n\nlp.parseExport = function() {\n  let node = this.startNode()\n  this.next()\n  if (this.eat(tt.star)) {\n    node.source = this.eatContextual(\"from\") ? this.parseExprAtom() : null\n    return this.finishNode(node, \"ExportAllDeclaration\")\n  }\n  if (this.eat(tt._default)) {\n    let expr = this.parseMaybeAssign()\n    if (expr.id) {\n      switch (expr.type) {\n      case \"FunctionExpression\": expr.type = \"FunctionDeclaration\"; break\n      case \"ClassExpression\": expr.type = \"ClassDeclaration\"; break\n      }\n    }\n    node.declaration = expr\n    this.semicolon()\n    return this.finishNode(node, \"ExportDefaultDeclaration\")\n  }\n  if (this.tok.type.keyword) {\n    node.declaration = this.parseStatement()\n    node.specifiers = []\n    node.source = null\n  } else {\n    node.declaration = null\n    node.specifiers = this.parseExportSpecifierList()\n    node.source = this.eatContextual(\"from\") ? this.parseExprAtom() : null\n    this.semicolon()\n  }\n  return this.finishNode(node, \"ExportNamedDeclaration\")\n}\n\nlp.parseImport = function() {\n  let node = this.startNode()\n  this.next()\n  if (this.tok.type === tt.string) {\n    node.specifiers = []\n    node.source = this.parseExprAtom()\n    node.kind = ''\n  } else {\n    let elt\n    if (this.tok.type === tt.name && this.tok.value !== \"from\") {\n      elt = this.startNode()\n      elt.local = this.parseIdent()\n      this.finishNode(elt, \"ImportDefaultSpecifier\")\n      this.eat(tt.comma)\n    }\n    node.specifiers = this.parseImportSpecifierList()\n    node.source = this.eatContextual(\"from\") ? this.parseExprAtom() : null\n    if (elt) node.specifiers.unshift(elt)\n  }\n  this.semicolon()\n  return this.finishNode(node, \"ImportDeclaration\")\n}\n\nlp.parseImportSpecifierList = function() {\n  let elts = []\n  if (this.tok.type === tt.star) {\n    let elt = this.startNode()\n    this.next()\n    if (this.eatContextual(\"as\")) elt.local = this.parseIdent()\n    elts.push(this.finishNode(elt, \"ImportNamespaceSpecifier\"))\n  } else {\n    let indent = this.curIndent, line = this.curLineStart, continuedLine = this.nextLineStart\n    this.pushCx()\n    this.eat(tt.braceL)\n    if (this.curLineStart > continuedLine) continuedLine = this.curLineStart\n    while (!this.closes(tt.braceR, indent + (this.curLineStart <= continuedLine ? 1 : 0), line)) {\n      let elt = this.startNode()\n      if (this.eat(tt.star)) {\n        if (this.eatContextual(\"as\")) elt.local = this.parseIdent()\n        this.finishNode(elt, \"ImportNamespaceSpecifier\")\n      } else {\n        if (this.isContextual(\"from\")) break\n        elt.imported = this.parseIdent()\n        elt.local = this.eatContextual(\"as\") ? this.parseIdent() : elt.imported\n        this.finishNode(elt, \"ImportSpecifier\")\n      }\n      elts.push(elt)\n      this.eat(tt.comma)\n    }\n    this.eat(tt.braceR)\n    this.popCx()\n  }\n  return elts\n}\n\nlp.parseExportSpecifierList = function() {\n  let elts = []\n  let indent = this.curIndent, line = this.curLineStart, continuedLine = this.nextLineStart\n  this.pushCx()\n  this.eat(tt.braceL)\n  if (this.curLineStart > continuedLine) continuedLine = this.curLineStart\n  while (!this.closes(tt.braceR, indent + (this.curLineStart <= continuedLine ? 1 : 0), line)) {\n    if (this.isContextual(\"from\")) break\n    let elt = this.startNode()\n    elt.local = this.parseIdent()\n    elt.exported = this.eatContextual(\"as\") ? this.parseIdent() : elt.local\n    this.finishNode(elt, \"ExportSpecifier\")\n    elts.push(elt)\n    this.eat(tt.comma)\n  }\n  this.eat(tt.braceR)\n  this.popCx()\n  return elts\n}\n"]}