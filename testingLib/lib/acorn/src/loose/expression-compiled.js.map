{"version":3,"sources":["/home/jared/Desktop/funCode/node_modules/acorn/src/loose/expression.js"],"names":[],"mappings":"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","file":"expression-compiled.js","sourcesContent":["import {LooseParser} from \"./state\"\nimport {isDummy} from \"./parseutil\"\nimport {tokTypes as tt} from \"..\"\n\nconst lp = LooseParser.prototype\n\nlp.checkLVal = function(expr, binding) {\n  if (!expr) return expr\n  switch (expr.type) {\n  case \"Identifier\":\n    return expr\n\n  case \"MemberExpression\":\n    return binding ? this.dummyIdent() : expr\n\n  case \"ObjectPattern\":\n  case \"ArrayPattern\":\n  case \"RestElement\":\n  case \"AssignmentPattern\":\n    if (this.options.ecmaVersion >= 6) return expr\n\n  default:\n    return this.dummyIdent()\n  }\n}\n\nlp.parseExpression = function(noIn) {\n  let start = this.storeCurrentPos()\n  let expr = this.parseMaybeAssign(noIn)\n  if (this.tok.type === tt.comma) {\n    let node = this.startNodeAt(start)\n    node.expressions = [expr]\n    while (this.eat(tt.comma)) node.expressions.push(this.parseMaybeAssign(noIn))\n    return this.finishNode(node, \"SequenceExpression\")\n  }\n  return expr\n}\n\nlp.parseParenExpression = function() {\n  this.pushCx()\n  this.expect(tt.parenL)\n  let val = this.parseExpression()\n  this.popCx()\n  this.expect(tt.parenR)\n  return val\n}\n\nlp.parseMaybeAssign = function(noIn) {\n  let start = this.storeCurrentPos()\n  let left = this.parseMaybeConditional(noIn)\n  if (this.tok.type.isAssign) {\n    let node = this.startNodeAt(start)\n    node.operator = this.tok.value\n    node.left = this.tok.type === tt.eq ? this.toAssignable(left) : this.checkLVal(left)\n    this.next()\n    node.right = this.parseMaybeAssign(noIn)\n    return this.finishNode(node, \"AssignmentExpression\")\n  }\n  return left\n}\n\nlp.parseMaybeConditional = function(noIn) {\n  let start = this.storeCurrentPos()\n  let expr = this.parseExprOps(noIn)\n  if (this.eat(tt.question)) {\n    let node = this.startNodeAt(start)\n    node.test = expr\n    node.consequent = this.parseMaybeAssign()\n    node.alternate = this.expect(tt.colon) ? this.parseMaybeAssign(noIn) : this.dummyIdent()\n    return this.finishNode(node, \"ConditionalExpression\")\n  }\n  return expr\n}\n\nlp.parseExprOps = function(noIn) {\n  let start = this.storeCurrentPos()\n  let indent = this.curIndent, line = this.curLineStart\n  return this.parseExprOp(this.parseMaybeUnary(noIn), start, -1, noIn, indent, line)\n}\n\nlp.parseExprOp = function(left, start, minPrec, noIn, indent, line) {\n  if (this.curLineStart != line && this.curIndent < indent && this.tokenStartsLine()) return left\n  let prec = this.tok.type.binop\n  if (prec != null && (!noIn || this.tok.type !== tt._in)) {\n    if (prec > minPrec) {\n      let node = this.startNodeAt(start)\n      node.left = left\n      node.operator = this.tok.value\n      this.next()\n      if (this.curLineStart != line && this.curIndent < indent && this.tokenStartsLine()) {\n        node.right = this.dummyIdent()\n      } else {\n        let rightStart = this.storeCurrentPos()\n        node.right = this.parseExprOp(this.parseMaybeUnary(noIn), rightStart, prec, noIn, indent, line)\n      }\n      this.finishNode(node, /&&|\\|\\|/.test(node.operator) ? \"LogicalExpression\" : \"BinaryExpression\")\n      return this.parseExprOp(node, start, minPrec, noIn, indent, line)\n    }\n  }\n  return left\n}\n\nlp.parseMaybeUnary = function(noIn) {\n  if (this.tok.type.prefix) {\n    let node = this.startNode(), update = this.tok.type === tt.incDec\n    node.operator = this.tok.value\n    node.prefix = true\n    this.next()\n    node.argument = this.parseMaybeUnary(noIn)\n    if (update) node.argument = this.checkLVal(node.argument)\n    return this.finishNode(node, update ? \"UpdateExpression\" : \"UnaryExpression\")\n  } else if (this.tok.type === tt.ellipsis) {\n    let node = this.startNode()\n    this.next()\n    node.argument = this.parseMaybeUnary(noIn)\n    return this.finishNode(node, \"SpreadElement\")\n  }\n  let start = this.storeCurrentPos()\n  let expr = this.parseExprSubscripts()\n  while (this.tok.type.postfix && !this.canInsertSemicolon()) {\n    let node = this.startNodeAt(start)\n    node.operator = this.tok.value\n    node.prefix = false\n    node.argument = this.checkLVal(expr)\n    this.next()\n    expr = this.finishNode(node, \"UpdateExpression\")\n  }\n  return expr\n}\n\nlp.parseExprSubscripts = function() {\n  let start = this.storeCurrentPos()\n  return this.parseSubscripts(this.parseExprAtom(), start, false, this.curIndent, this.curLineStart)\n}\n\nlp.parseSubscripts = function(base, start, noCalls, startIndent, line) {\n  for (;;) {\n    if (this.curLineStart != line && this.curIndent <= startIndent && this.tokenStartsLine()) {\n      if (this.tok.type == tt.dot && this.curIndent == startIndent)\n        --startIndent\n      else\n        return base\n    }\n\n    if (this.eat(tt.dot)) {\n      let node = this.startNodeAt(start)\n      node.object = base\n      if (this.curLineStart != line && this.curIndent <= startIndent && this.tokenStartsLine())\n        node.property = this.dummyIdent()\n      else\n        node.property = this.parsePropertyAccessor() || this.dummyIdent()\n      node.computed = false\n      base = this.finishNode(node, \"MemberExpression\")\n    } else if (this.tok.type == tt.bracketL) {\n      this.pushCx()\n      this.next()\n      let node = this.startNodeAt(start)\n      node.object = base\n      node.property = this.parseExpression()\n      node.computed = true\n      this.popCx()\n      this.expect(tt.bracketR)\n      base = this.finishNode(node, \"MemberExpression\")\n    } else if (!noCalls && this.tok.type == tt.parenL) {\n      let node = this.startNodeAt(start)\n      node.callee = base\n      node.arguments = this.parseExprList(tt.parenR)\n      base = this.finishNode(node, \"CallExpression\")\n    } else if (this.tok.type == tt.backQuote) {\n      let node = this.startNodeAt(start)\n      node.tag = base\n      node.quasi = this.parseTemplate()\n      base = this.finishNode(node, \"TaggedTemplateExpression\")\n    } else {\n      return base\n    }\n  }\n}\n\nlp.parseExprAtom = function() {\n  let node\n  switch (this.tok.type) {\n  case tt._this:\n  case tt._super:\n    let type = this.tok.type === tt._this ? \"ThisExpression\" : \"Super\"\n    node = this.startNode()\n    this.next()\n    return this.finishNode(node, type)\n\n  case tt.name:\n    let start = this.storeCurrentPos()\n    let id = this.parseIdent()\n    return this.eat(tt.arrow) ? this.parseArrowExpression(this.startNodeAt(start), [id]) : id\n\n  case tt.regexp:\n    node = this.startNode()\n    let val = this.tok.value\n    node.regex = {pattern: val.pattern, flags: val.flags}\n    node.value = val.value\n    node.raw = this.input.slice(this.tok.start, this.tok.end)\n    this.next()\n    return this.finishNode(node, \"Literal\")\n\n  case tt.num: case tt.string:\n    node = this.startNode()\n    node.value = this.tok.value\n    node.raw = this.input.slice(this.tok.start, this.tok.end)\n    this.next()\n    return this.finishNode(node, \"Literal\")\n\n  case tt._null: case tt._true: case tt._false:\n    node = this.startNode()\n    node.value = this.tok.type === tt._null ? null : this.tok.type === tt._true\n    node.raw = this.tok.type.keyword\n    this.next()\n    return this.finishNode(node, \"Literal\")\n\n  case tt.parenL:\n    let parenStart = this.storeCurrentPos()\n    this.next()\n    let inner = this.parseExpression()\n    this.expect(tt.parenR)\n    if (this.eat(tt.arrow)) {\n      return this.parseArrowExpression(this.startNodeAt(parenStart), inner.expressions || (isDummy(inner) ? [] : [inner]))\n    }\n    if (this.options.preserveParens) {\n      let par = this.startNodeAt(parenStart)\n      par.expression = inner\n      inner = this.finishNode(par, \"ParenthesizedExpression\")\n    }\n    return inner\n\n  case tt.bracketL:\n    node = this.startNode()\n    node.elements = this.parseExprList(tt.bracketR, true)\n    return this.finishNode(node, \"ArrayExpression\")\n\n  case tt.braceL:\n    return this.parseObj()\n\n  case tt._class:\n    return this.parseClass()\n\n  case tt._function:\n    node = this.startNode()\n    this.next()\n    return this.parseFunction(node, false)\n\n  case tt._new:\n    return this.parseNew()\n\n  case tt._yield:\n    node = this.startNode()\n    this.next()\n    if (this.semicolon() || this.canInsertSemicolon() || (this.tok.type != tt.star && !this.tok.type.startsExpr)) {\n      node.delegate = false\n      node.argument = null\n    } else {\n      node.delegate = this.eat(tt.star)\n      node.argument = this.parseMaybeAssign()\n    }\n    return this.finishNode(node, \"YieldExpression\")\n\n  case tt.backQuote:\n    return this.parseTemplate()\n\n  default:\n    return this.dummyIdent()\n  }\n}\n\nlp.parseNew = function() {\n  let node = this.startNode(), startIndent = this.curIndent, line = this.curLineStart\n  let meta = this.parseIdent(true)\n  if (this.options.ecmaVersion >= 6 && this.eat(tt.dot)) {\n    node.meta = meta\n    node.property = this.parseIdent(true)\n    return this.finishNode(node, \"MetaProperty\")\n  }\n  let start = this.storeCurrentPos()\n  node.callee = this.parseSubscripts(this.parseExprAtom(), start, true, startIndent, line)\n  if (this.tok.type == tt.parenL) {\n    node.arguments = this.parseExprList(tt.parenR)\n  } else {\n    node.arguments = []\n  }\n  return this.finishNode(node, \"NewExpression\")\n}\n\nlp.parseTemplateElement = function() {\n  let elem = this.startNode()\n  elem.value = {\n    raw: this.input.slice(this.tok.start, this.tok.end),\n    cooked: this.tok.value\n  }\n  this.next()\n  elem.tail = this.tok.type === tt.backQuote\n  return this.finishNode(elem, \"TemplateElement\")\n}\n\nlp.parseTemplate = function() {\n  let node = this.startNode()\n  this.next()\n  node.expressions = []\n  let curElt = this.parseTemplateElement()\n  node.quasis = [curElt]\n  while (!curElt.tail) {\n    this.next()\n    node.expressions.push(this.parseExpression())\n    if (this.expect(tt.braceR)) {\n      curElt = this.parseTemplateElement()\n    } else {\n      curElt = this.startNode()\n      curElt.value = {cooked: '', raw: ''}\n      curElt.tail = true\n    }\n    node.quasis.push(curElt)\n  }\n  this.expect(tt.backQuote)\n  return this.finishNode(node, \"TemplateLiteral\")\n}\n\nlp.parseObj = function() {\n  let node = this.startNode()\n  node.properties = []\n  this.pushCx()\n  let indent = this.curIndent + 1, line = this.curLineStart\n  this.eat(tt.braceL)\n  if (this.curIndent + 1 < indent) { indent = this.curIndent; line = this.curLineStart }\n  while (!this.closes(tt.braceR, indent, line)) {\n    let prop = this.startNode(), isGenerator, start\n    if (this.options.ecmaVersion >= 6) {\n      start = this.storeCurrentPos()\n      prop.method = false\n      prop.shorthand = false\n      isGenerator = this.eat(tt.star)\n    }\n    this.parsePropertyName(prop)\n    if (isDummy(prop.key)) { if (isDummy(this.parseMaybeAssign())) this.next(); this.eat(tt.comma); continue }\n    if (this.eat(tt.colon)) {\n      prop.kind = \"init\"\n      prop.value = this.parseMaybeAssign()\n    } else if (this.options.ecmaVersion >= 6 && (this.tok.type === tt.parenL || this.tok.type === tt.braceL)) {\n      prop.kind = \"init\"\n      prop.method = true\n      prop.value = this.parseMethod(isGenerator)\n    } else if (this.options.ecmaVersion >= 5 && prop.key.type === \"Identifier\" &&\n               !prop.computed && (prop.key.name === \"get\" || prop.key.name === \"set\") &&\n               (this.tok.type != tt.comma && this.tok.type != tt.braceR)) {\n      prop.kind = prop.key.name\n      this.parsePropertyName(prop)\n      prop.value = this.parseMethod(false)\n    } else {\n      prop.kind = \"init\"\n      if (this.options.ecmaVersion >= 6) {\n        if (this.eat(tt.eq)) {\n          let assign = this.startNodeAt(start)\n          assign.operator = \"=\"\n          assign.left = prop.key\n          assign.right = this.parseMaybeAssign()\n          prop.value = this.finishNode(assign, \"AssignmentExpression\")\n        } else {\n          prop.value = prop.key\n        }\n      } else {\n        prop.value = this.dummyIdent()\n      }\n      prop.shorthand = true\n    }\n    node.properties.push(this.finishNode(prop, \"Property\"))\n    this.eat(tt.comma)\n  }\n  this.popCx()\n  if (!this.eat(tt.braceR)) {\n    // If there is no closing brace, make the node span to the start\n    // of the next token (this is useful for Tern)\n    this.last.end = this.tok.start\n    if (this.options.locations) this.last.loc.end = this.tok.loc.start\n  }\n  return this.finishNode(node, \"ObjectExpression\")\n}\n\nlp.parsePropertyName = function(prop) {\n  if (this.options.ecmaVersion >= 6) {\n    if (this.eat(tt.bracketL)) {\n      prop.computed = true\n      prop.key = this.parseExpression()\n      this.expect(tt.bracketR)\n      return\n    } else {\n      prop.computed = false\n    }\n  }\n  let key = (this.tok.type === tt.num || this.tok.type === tt.string) ? this.parseExprAtom() : this.parseIdent()\n  prop.key = key || this.dummyIdent()\n}\n\nlp.parsePropertyAccessor = function() {\n  if (this.tok.type === tt.name || this.tok.type.keyword) return this.parseIdent()\n}\n\nlp.parseIdent = function() {\n  let name = this.tok.type === tt.name ? this.tok.value : this.tok.type.keyword\n  if (!name) return this.dummyIdent()\n  let node = this.startNode()\n  this.next()\n  node.name = name\n  return this.finishNode(node, \"Identifier\")\n}\n\nlp.initFunction = function(node) {\n  node.id = null\n  node.params = []\n  if (this.options.ecmaVersion >= 6) {\n    node.generator = false\n    node.expression = false\n  }\n}\n\n// Convert existing expression atom to assignable pattern\n// if possible.\n\nlp.toAssignable = function(node, binding) {\n  if (this.options.ecmaVersion >= 6 && node) {\n    switch (node.type) {\n    case \"ObjectExpression\":\n      node.type = \"ObjectPattern\"\n      let props = node.properties\n      for (let i = 0; i < props.length; i++)\n        this.toAssignable(props[i].value, binding)\n      break\n\n    case \"ArrayExpression\":\n      node.type = \"ArrayPattern\"\n      this.toAssignableList(node.elements, binding)\n      break\n\n    case \"SpreadElement\":\n      node.type = \"RestElement\"\n      node.argument = this.toAssignable(node.argument, binding)\n      break\n\n    case \"AssignmentExpression\":\n      node.type = \"AssignmentPattern\"\n      break\n    }\n  }\n  return this.checkLVal(node, binding)\n}\n\nlp.toAssignableList = function(exprList, binding) {\n  for (let i = 0; i < exprList.length; i++)\n    exprList[i] = this.toAssignable(exprList[i], binding)\n  return exprList\n}\n\nlp.parseFunctionParams = function(params) {\n  params = this.parseExprList(tt.parenR)\n  return this.toAssignableList(params, true)\n}\n\nlp.parseMethod = function(isGenerator) {\n  let node = this.startNode()\n  this.initFunction(node)\n  node.params = this.parseFunctionParams()\n  node.generator = isGenerator || false\n  node.expression = this.options.ecmaVersion >= 6 && this.tok.type !== tt.braceL\n  node.body = node.expression ? this.parseMaybeAssign() : this.parseBlock()\n  return this.finishNode(node, \"FunctionExpression\")\n}\n\nlp.parseArrowExpression = function(node, params) {\n  this.initFunction(node)\n  node.params = this.toAssignableList(params, true)\n  node.expression = this.tok.type !== tt.braceL\n  node.body = node.expression ? this.parseMaybeAssign() : this.parseBlock()\n  return this.finishNode(node, \"ArrowFunctionExpression\")\n}\n\nlp.parseExprList = function(close, allowEmpty) {\n  this.pushCx()\n  let indent = this.curIndent, line = this.curLineStart, elts = []\n  this.next(); // Opening bracket\n  while (!this.closes(close, indent + 1, line)) {\n    if (this.eat(tt.comma)) {\n      elts.push(allowEmpty ? null : this.dummyIdent())\n      continue\n    }\n    let elt = this.parseMaybeAssign()\n    if (isDummy(elt)) {\n      if (this.closes(close, indent, line)) break\n      this.next()\n    } else {\n      elts.push(elt)\n    }\n    this.eat(tt.comma)\n  }\n  this.popCx()\n  if (!this.eat(close)) {\n    // If there is no closing brace, make the node span to the start\n    // of the next token (this is useful for Tern)\n    this.last.end = this.tok.start\n    if (this.options.locations) this.last.loc.end = this.tok.loc.start\n  }\n  return elts\n}\n"]}