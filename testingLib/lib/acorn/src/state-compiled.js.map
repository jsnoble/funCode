{"version":3,"sources":["/home/jared/Desktop/funCode/node_modules/acorn/src/state.js"],"names":[],"mappings":"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","file":"state-compiled.js","sourcesContent":["import {reservedWords, keywords} from \"./identifier\"\nimport {types as tt, lineBreak} from \"./tokentype\"\n\nexport function Parser(options, input, startPos) {\n  this.options = options\n  this.loadPlugins(this.options.plugins)\n  this.sourceFile = this.options.sourceFile || null\n  this.isKeyword = keywords[this.options.ecmaVersion >= 6 ? 6 : 5]\n  this.isReservedWord = reservedWords[this.options.ecmaVersion]\n  this.input = input\n\n  // Set up token state\n\n  // The current position of the tokenizer in the input.\n  if (startPos) {\n    this.pos = startPos\n    this.lineStart = Math.max(0, this.input.lastIndexOf(\"\\n\", startPos))\n    this.curLine = this.input.slice(0, this.lineStart).split(lineBreak).length\n  } else {\n    this.pos = this.lineStart = 0\n    this.curLine = 1\n  }\n\n  // Properties of the current token:\n  // Its type\n  this.type = tt.eof\n  // For tokens that include more information than their type, the value\n  this.value = null\n  // Its start and end offset\n  this.start = this.end = this.pos\n  // And, if locations are used, the {line, column} object\n  // corresponding to those offsets\n  this.startLoc = this.endLoc = null\n\n  // Position information for the previous token\n  this.lastTokEndLoc = this.lastTokStartLoc = null\n  this.lastTokStart = this.lastTokEnd = this.pos\n\n  // The context stack is used to superficially track syntactic\n  // context to predict whether a regular expression is allowed in a\n  // given position.\n  this.context = this.initialContext()\n  this.exprAllowed = true\n\n  // Figure out if it's a module code.\n  this.strict = this.inModule = this.options.sourceType === \"module\"\n\n  // Flags to track whether we are in a function, a generator.\n  this.inFunction = this.inGenerator = false\n  // Labels in scope.\n  this.labels = []\n\n  // If enabled, skip leading hashbang line.\n  if (this.pos === 0 && this.options.allowHashBang && this.input.slice(0, 2) === '#!')\n    this.skipLineComment(2)\n}\n\nParser.prototype.extend = function(name, f) {\n  this[name] = f(this[name])\n}\n\n// Registered plugins\n\nexport const plugins = {}\n\nParser.prototype.loadPlugins = function(plugins) {\n  for (let name in plugins) {\n    let plugin = exports.plugins[name]\n    if (!plugin) throw new Error(\"Plugin '\" + name + \"' not found\")\n    plugin(this, plugins[name])\n  }\n}\n"]}