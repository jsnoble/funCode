{"version":3,"sources":["/home/jared/Desktop/funCode/node_modules/acorn/src/tokenize.js"],"names":[],"mappings":"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","file":"tokenize-compiled.js","sourcesContent":["import {isIdentifierStart, isIdentifierChar} from \"./identifier\"\nimport {types as tt, keywords as keywordTypes} from \"./tokentype\"\nimport {Parser} from \"./state\"\nimport {SourceLocation} from \"./location\"\nimport {lineBreak, lineBreakG, isNewLine, nonASCIIwhitespace} from \"./whitespace\"\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nexport class Token {\n  constructor(p) {\n    this.type = p.type\n    this.value = p.value\n    this.start = p.start\n    this.end = p.end\n    if (p.options.locations)\n      this.loc = new SourceLocation(p, p.startLoc, p.endLoc)\n    if (p.options.ranges)\n      this.range = [p.start, p.end]\n  }\n}\n\n// ## Tokenizer\n\nconst pp = Parser.prototype\n\n// Move to the next token\n\npp.next = function() {\n  if (this.options.onToken)\n    this.options.onToken(new Token(this))\n\n  this.lastTokEnd = this.end\n  this.lastTokStart = this.start\n  this.lastTokEndLoc = this.endLoc\n  this.lastTokStartLoc = this.startLoc\n  this.nextToken()\n}\n\npp.getToken = function() {\n  this.next()\n  return new Token(this)\n}\n\n// If we're in an ES6 environment, make parsers iterable\nif (typeof Symbol !== \"undefined\")\n  pp[Symbol.iterator] = function () {\n    let self = this\n    return {next: function () {\n      let token = self.getToken()\n      return {\n        done: token.type === tt.eof,\n        value: token\n      }\n    }}\n  }\n\n// Toggle strict mode. Re-reads the next number or string to please\n// pedantic tests (`\"use strict\"; 010;` should fail).\n\npp.setStrict = function(strict) {\n  this.strict = strict\n  if (this.type !== tt.num && this.type !== tt.string) return\n  this.pos = this.start\n  if (this.options.locations) {\n    while (this.pos < this.lineStart) {\n      this.lineStart = this.input.lastIndexOf(\"\\n\", this.lineStart - 2) + 1\n      --this.curLine\n    }\n  }\n  this.nextToken()\n}\n\npp.curContext = function() {\n  return this.context[this.context.length - 1]\n}\n\n// Read a single token, updating the parser object's token-related\n// properties.\n\npp.nextToken = function() {\n  let curContext = this.curContext()\n  if (!curContext || !curContext.preserveSpace) this.skipSpace()\n\n  this.start = this.pos\n  if (this.options.locations) this.startLoc = this.curPosition()\n  if (this.pos >= this.input.length) return this.finishToken(tt.eof)\n\n  if (curContext.override) return curContext.override(this)\n  else this.readToken(this.fullCharCodeAtPos())\n}\n\npp.readToken = function(code) {\n  // Identifier or keyword. '\\uXXXX' sequences are allowed in\n  // identifiers, so '\\' also dispatches to that.\n  if (isIdentifierStart(code, this.options.ecmaVersion >= 6) || code === 92 /* '\\' */)\n    return this.readWord()\n\n  return this.getTokenFromCode(code)\n}\n\npp.fullCharCodeAtPos = function() {\n  let code = this.input.charCodeAt(this.pos)\n  if (code <= 0xd7ff || code >= 0xe000) return code\n  let next = this.input.charCodeAt(this.pos + 1)\n  return (code << 10) + next - 0x35fdc00\n}\n\npp.skipBlockComment = function() {\n  let startLoc = this.options.onComment && this.options.locations && this.curPosition()\n  let start = this.pos, end = this.input.indexOf(\"*/\", this.pos += 2)\n  if (end === -1) this.raise(this.pos - 2, \"Unterminated comment\")\n  this.pos = end + 2\n  if (this.options.locations) {\n    lineBreakG.lastIndex = start\n    let match\n    while ((match = lineBreakG.exec(this.input)) && match.index < this.pos) {\n      ++this.curLine\n      this.lineStart = match.index + match[0].length\n    }\n  }\n  if (this.options.onComment)\n    this.options.onComment(true, this.input.slice(start + 2, end), start, this.pos,\n                           startLoc, this.options.locations && this.curPosition())\n}\n\npp.skipLineComment = function(startSkip) {\n  let start = this.pos\n  let startLoc = this.options.onComment && this.options.locations && this.curPosition()\n  let ch = this.input.charCodeAt(this.pos+=startSkip)\n  while (this.pos < this.input.length && ch !== 10 && ch !== 13 && ch !== 8232 && ch !== 8233) {\n    ++this.pos\n    ch = this.input.charCodeAt(this.pos)\n  }\n  if (this.options.onComment)\n    this.options.onComment(false, this.input.slice(start + startSkip, this.pos), start, this.pos,\n                           startLoc, this.options.locations && this.curPosition())\n}\n\n// Called at the start of the parse and after every token. Skips\n// whitespace and comments, and.\n\npp.skipSpace = function() {\n  while (this.pos < this.input.length) {\n    let ch = this.input.charCodeAt(this.pos)\n    if (ch === 32) { // ' '\n      ++this.pos\n    } else if (ch === 13) {\n      ++this.pos\n      let next = this.input.charCodeAt(this.pos)\n      if (next === 10) {\n        ++this.pos\n      }\n      if (this.options.locations) {\n        ++this.curLine\n        this.lineStart = this.pos\n      }\n    } else if (ch === 10 || ch === 8232 || ch === 8233) {\n      ++this.pos\n      if (this.options.locations) {\n        ++this.curLine\n        this.lineStart = this.pos\n      }\n    } else if (ch > 8 && ch < 14) {\n      ++this.pos\n    } else if (ch === 47) { // '/'\n      let next = this.input.charCodeAt(this.pos + 1)\n      if (next === 42) { // '*'\n        this.skipBlockComment()\n      } else if (next === 47) { // '/'\n        this.skipLineComment(2)\n      } else break\n    } else if (ch === 160) { // '\\xa0'\n      ++this.pos\n    } else if (ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) {\n      ++this.pos\n    } else {\n      break\n    }\n  }\n}\n\n// Called at the end of every token. Sets `end`, `val`, and\n// maintains `context` and `exprAllowed`, and skips the space after\n// the token, so that the next one's `start` will point at the\n// right position.\n\npp.finishToken = function(type, val) {\n  this.end = this.pos\n  if (this.options.locations) this.endLoc = this.curPosition()\n  let prevType = this.type\n  this.type = type\n  this.value = val\n\n  this.updateContext(prevType)\n}\n\n// ### Token reading\n\n// This is the function that is called to fetch the next token. It\n// is somewhat obscure, because it works in character codes rather\n// than characters, and because operator parsing has been inlined\n// into it.\n//\n// All in the name of speed.\n//\npp.readToken_dot = function() {\n  let next = this.input.charCodeAt(this.pos + 1)\n  if (next >= 48 && next <= 57) return this.readNumber(true)\n  let next2 = this.input.charCodeAt(this.pos + 2)\n  if (this.options.ecmaVersion >= 6 && next === 46 && next2 === 46) { // 46 = dot '.'\n    this.pos += 3\n    return this.finishToken(tt.ellipsis)\n  } else {\n    ++this.pos\n    return this.finishToken(tt.dot)\n  }\n}\n\npp.readToken_slash = function() { // '/'\n  let next = this.input.charCodeAt(this.pos + 1)\n  if (this.exprAllowed) {++this.pos; return this.readRegexp();}\n  if (next === 61) return this.finishOp(tt.assign, 2)\n  return this.finishOp(tt.slash, 1)\n}\n\npp.readToken_mult_modulo = function(code) { // '%*'\n  let next = this.input.charCodeAt(this.pos + 1)\n  if (next === 61) return this.finishOp(tt.assign, 2)\n  return this.finishOp(code === 42 ? tt.star : tt.modulo, 1)\n}\n\npp.readToken_pipe_amp = function(code) { // '|&'\n  let next = this.input.charCodeAt(this.pos + 1)\n  if (next === code) return this.finishOp(code === 124 ? tt.logicalOR : tt.logicalAND, 2)\n  if (next === 61) return this.finishOp(tt.assign, 2)\n  return this.finishOp(code === 124 ? tt.bitwiseOR : tt.bitwiseAND, 1)\n}\n\npp.readToken_caret = function() { // '^'\n  let next = this.input.charCodeAt(this.pos + 1)\n  if (next === 61) return this.finishOp(tt.assign, 2)\n  return this.finishOp(tt.bitwiseXOR, 1)\n}\n\npp.readToken_plus_min = function(code) { // '+-'\n  let next = this.input.charCodeAt(this.pos + 1)\n  if (next === code) {\n    if (next == 45 && this.input.charCodeAt(this.pos + 2) == 62 &&\n        lineBreak.test(this.input.slice(this.lastTokEnd, this.pos))) {\n      // A `-->` line comment\n      this.skipLineComment(3)\n      this.skipSpace()\n      return this.nextToken()\n    }\n    return this.finishOp(tt.incDec, 2)\n  }\n  if (next === 61) return this.finishOp(tt.assign, 2)\n  return this.finishOp(tt.plusMin, 1)\n}\n\npp.readToken_lt_gt = function(code) { // '<>'\n  let next = this.input.charCodeAt(this.pos + 1)\n  let size = 1\n  if (next === code) {\n    size = code === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2\n    if (this.input.charCodeAt(this.pos + size) === 61) return this.finishOp(tt.assign, size + 1)\n    return this.finishOp(tt.bitShift, size)\n  }\n  if (next == 33 && code == 60 && this.input.charCodeAt(this.pos + 2) == 45 &&\n      this.input.charCodeAt(this.pos + 3) == 45) {\n    if (this.inModule) unexpected()\n    // `<!--`, an XML-style comment that should be interpreted as a line comment\n    this.skipLineComment(4)\n    this.skipSpace()\n    return this.nextToken()\n  }\n  if (next === 61)\n    size = this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2\n  return this.finishOp(tt.relational, size)\n}\n\npp.readToken_eq_excl = function(code) { // '=!'\n  let next = this.input.charCodeAt(this.pos + 1)\n  if (next === 61) return this.finishOp(tt.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2)\n  if (code === 61 && next === 62 && this.options.ecmaVersion >= 6) { // '=>'\n    this.pos += 2\n    return this.finishToken(tt.arrow)\n  }\n  return this.finishOp(code === 61 ? tt.eq : tt.prefix, 1)\n}\n\npp.getTokenFromCode = function(code) {\n  switch (code) {\n    // The interpretation of a dot depends on whether it is followed\n    // by a digit or another two dots.\n  case 46: // '.'\n    return this.readToken_dot()\n\n    // Punctuation tokens.\n  case 40: ++this.pos; return this.finishToken(tt.parenL)\n  case 41: ++this.pos; return this.finishToken(tt.parenR)\n  case 59: ++this.pos; return this.finishToken(tt.semi)\n  case 44: ++this.pos; return this.finishToken(tt.comma)\n  case 91: ++this.pos; return this.finishToken(tt.bracketL)\n  case 93: ++this.pos; return this.finishToken(tt.bracketR)\n  case 123: ++this.pos; return this.finishToken(tt.braceL)\n  case 125: ++this.pos; return this.finishToken(tt.braceR)\n  case 58: ++this.pos; return this.finishToken(tt.colon)\n  case 63: ++this.pos; return this.finishToken(tt.question)\n\n  case 96: // '`'\n    if (this.options.ecmaVersion < 6) break\n    ++this.pos\n    return this.finishToken(tt.backQuote)\n\n  case 48: // '0'\n    let next = this.input.charCodeAt(this.pos + 1)\n    if (next === 120 || next === 88) return this.readRadixNumber(16); // '0x', '0X' - hex number\n    if (this.options.ecmaVersion >= 6) {\n      if (next === 111 || next === 79) return this.readRadixNumber(8); // '0o', '0O' - octal number\n      if (next === 98 || next === 66) return this.readRadixNumber(2); // '0b', '0B' - binary number\n    }\n    // Anything else beginning with a digit is an integer, octal\n    // number, or float.\n  case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: // 1-9\n    return this.readNumber(false)\n\n    // Quotes produce strings.\n  case 34: case 39: // '\"', \"'\"\n    return this.readString(code)\n\n    // Operators are parsed inline in tiny state machines. '=' (61) is\n    // often referred to. `finishOp` simply skips the amount of\n    // characters it is given as second argument, and returns a token\n    // of the type given by its first argument.\n\n  case 47: // '/'\n    return this.readToken_slash()\n\n  case 37: case 42: // '%*'\n    return this.readToken_mult_modulo(code)\n\n  case 124: case 38: // '|&'\n    return this.readToken_pipe_amp(code)\n\n  case 94: // '^'\n    return this.readToken_caret()\n\n  case 43: case 45: // '+-'\n    return this.readToken_plus_min(code)\n\n  case 60: case 62: // '<>'\n    return this.readToken_lt_gt(code)\n\n  case 61: case 33: // '=!'\n    return this.readToken_eq_excl(code)\n\n  case 126: // '~'\n    return this.finishOp(tt.prefix, 1)\n  }\n\n  this.raise(this.pos, \"Unexpected character '\" + codePointToString(code) + \"'\")\n}\n\npp.finishOp = function(type, size) {\n  let str = this.input.slice(this.pos, this.pos + size)\n  this.pos += size\n  return this.finishToken(type, str)\n}\n\nvar regexpUnicodeSupport = false\ntry { new RegExp(\"\\uffff\", \"u\"); regexpUnicodeSupport = true }\ncatch(e) {}\n\n// Parse a regular expression. Some context-awareness is necessary,\n// since a '/' inside a '[]' set does not end the expression.\n\npp.readRegexp = function() {\n  let escaped, inClass, start = this.pos\n  for (;;) {\n    if (this.pos >= this.input.length) this.raise(start, \"Unterminated regular expression\")\n    let ch = this.input.charAt(this.pos)\n    if (lineBreak.test(ch)) this.raise(start, \"Unterminated regular expression\")\n    if (!escaped) {\n      if (ch === \"[\") inClass = true\n      else if (ch === \"]\" && inClass) inClass = false\n      else if (ch === \"/\" && !inClass) break\n      escaped = ch === \"\\\\\"\n    } else escaped = false\n    ++this.pos\n  }\n  let content = this.input.slice(start, this.pos)\n  ++this.pos\n  // Need to use `readWord1` because '\\uXXXX' sequences are allowed\n  // here (don't ask).\n  let mods = this.readWord1()\n  let tmp = content\n  if (mods) {\n    let validFlags = /^[gmsiy]*$/\n    if (this.options.ecmaVersion >= 6) validFlags = /^[gmsiyu]*$/\n    if (!validFlags.test(mods)) this.raise(start, \"Invalid regular expression flag\")\n    if (mods.indexOf('u') >= 0 && !regexpUnicodeSupport) {\n      // Replace each astral symbol and every Unicode escape sequence that\n      // possibly represents an astral symbol or a paired surrogate with a\n      // single ASCII symbol to avoid throwing on regular expressions that\n      // are only valid in combination with the `/u` flag.\n      // Note: replacing with the ASCII symbol `x` might cause false\n      // negatives in unlikely scenarios. For example, `[\\u{61}-b]` is a\n      // perfectly valid pattern that is equivalent to `[a-b]`, but it would\n      // be replaced by `[x-b]` which throws an error.\n      tmp = tmp.replace(/\\\\u([a-fA-F0-9]{4})|\\\\u\\{([0-9a-fA-F]+)\\}|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g, \"x\")\n    }\n  }\n  // Detect invalid regular expressions.\n  try {\n    new RegExp(tmp)\n  } catch (e) {\n    if (e instanceof SyntaxError) this.raise(start, \"Error parsing regular expression: \" + e.message)\n    this.raise(e)\n  }\n  // Get a regular expression object for this pattern-flag pair, or `null` in\n  // case the current environment doesn't support the flags it uses.\n  let value\n  try {\n    value = new RegExp(content, mods)\n  } catch (err) {\n    value = null\n  }\n  return this.finishToken(tt.regexp, {pattern: content, flags: mods, value: value})\n}\n\n// Read an integer in the given radix. Return null if zero digits\n// were read, the integer value otherwise. When `len` is given, this\n// will return `null` unless the integer has exactly `len` digits.\n\npp.readInt = function(radix, len) {\n  let start = this.pos, total = 0\n  for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n    let code = this.input.charCodeAt(this.pos), val\n    if (code >= 97) val = code - 97 + 10; // a\n    else if (code >= 65) val = code - 65 + 10; // A\n    else if (code >= 48 && code <= 57) val = code - 48; // 0-9\n    else val = Infinity\n    if (val >= radix) break\n    ++this.pos\n    total = total * radix + val\n  }\n  if (this.pos === start || len != null && this.pos - start !== len) return null\n\n  return total\n}\n\npp.readRadixNumber = function(radix) {\n  this.pos += 2; // 0x\n  let val = this.readInt(radix)\n  if (val == null) this.raise(this.start + 2, \"Expected number in radix \" + radix)\n  if (isIdentifierStart(this.fullCharCodeAtPos())) this.raise(this.pos, \"Identifier directly after number\")\n  return this.finishToken(tt.num, val)\n}\n\n// Read an integer, octal integer, or floating-point number.\n\npp.readNumber = function(startsWithDot) {\n  let start = this.pos, isFloat = false, octal = this.input.charCodeAt(this.pos) === 48\n  if (!startsWithDot && this.readInt(10) === null) this.raise(start, \"Invalid number\")\n  if (this.input.charCodeAt(this.pos) === 46) {\n    ++this.pos\n    this.readInt(10)\n    isFloat = true\n  }\n  let next = this.input.charCodeAt(this.pos)\n  if (next === 69 || next === 101) { // 'eE'\n    next = this.input.charCodeAt(++this.pos)\n    if (next === 43 || next === 45) ++this.pos; // '+-'\n    if (this.readInt(10) === null) this.raise(start, \"Invalid number\")\n    isFloat = true\n  }\n  if (isIdentifierStart(this.fullCharCodeAtPos())) this.raise(this.pos, \"Identifier directly after number\")\n\n  let str = this.input.slice(start, this.pos), val\n  if (isFloat) val = parseFloat(str)\n  else if (!octal || str.length === 1) val = parseInt(str, 10)\n  else if (/[89]/.test(str) || this.strict) this.raise(start, \"Invalid number\")\n  else val = parseInt(str, 8)\n  return this.finishToken(tt.num, val)\n}\n\n// Read a string value, interpreting backslash-escapes.\n\npp.readCodePoint = function() {\n  let ch = this.input.charCodeAt(this.pos), code\n\n  if (ch === 123) {\n    if (this.options.ecmaVersion < 6) this.unexpected()\n    ++this.pos\n    code = this.readHexChar(this.input.indexOf('}', this.pos) - this.pos)\n    ++this.pos\n    if (code > 0x10FFFF) this.unexpected()\n  } else {\n    code = this.readHexChar(4)\n  }\n  return code\n}\n\nfunction codePointToString(code) {\n  // UTF-16 Decoding\n  if (code <= 0xFFFF) return String.fromCharCode(code)\n  return String.fromCharCode(((code - 0x10000) >> 10) + 0xD800,\n                             ((code - 0x10000) & 1023) + 0xDC00)\n}\n\npp.readString = function(quote) {\n  let out = \"\", chunkStart = ++this.pos\n  for (;;) {\n    if (this.pos >= this.input.length) this.raise(this.start, \"Unterminated string constant\")\n    let ch = this.input.charCodeAt(this.pos)\n    if (ch === quote) break\n    if (ch === 92) { // '\\'\n      out += this.input.slice(chunkStart, this.pos)\n      out += this.readEscapedChar()\n      chunkStart = this.pos\n    } else {\n      if (isNewLine(ch)) this.raise(this.start, \"Unterminated string constant\")\n      ++this.pos\n    }\n  }\n  out += this.input.slice(chunkStart, this.pos++)\n  return this.finishToken(tt.string, out)\n}\n\n// Reads template string tokens.\n\npp.readTmplToken = function() {\n  let out = \"\", chunkStart = this.pos\n  for (;;) {\n    if (this.pos >= this.input.length) this.raise(this.start, \"Unterminated template\")\n    let ch = this.input.charCodeAt(this.pos)\n    if (ch === 96 || ch === 36 && this.input.charCodeAt(this.pos + 1) === 123) { // '`', '${'\n      if (this.pos === this.start && this.type === tt.template) {\n        if (ch === 36) {\n          this.pos += 2\n          return this.finishToken(tt.dollarBraceL)\n        } else {\n          ++this.pos\n          return this.finishToken(tt.backQuote)\n        }\n      }\n      out += this.input.slice(chunkStart, this.pos)\n      return this.finishToken(tt.template, out)\n    }\n    if (ch === 92) { // '\\'\n      out += this.input.slice(chunkStart, this.pos)\n      out += this.readEscapedChar()\n      chunkStart = this.pos\n    } else if (isNewLine(ch)) {\n      out += this.input.slice(chunkStart, this.pos)\n      ++this.pos\n      if (ch === 13 && this.input.charCodeAt(this.pos) === 10) {\n        ++this.pos\n        out += \"\\n\"\n      } else {\n        out += String.fromCharCode(ch)\n      }\n      if (this.options.locations) {\n        ++this.curLine\n        this.lineStart = this.pos\n      }\n      chunkStart = this.pos\n    } else {\n      ++this.pos\n    }\n  }\n}\n\n// Used to read escaped characters\n\npp.readEscapedChar = function() {\n  let ch = this.input.charCodeAt(++this.pos)\n  let octal = /^[0-7]+/.exec(this.input.slice(this.pos, this.pos + 3))\n  if (octal) octal = octal[0]\n  while (octal && parseInt(octal, 8) > 255) octal = octal.slice(0, -1)\n  if (octal === \"0\") octal = null\n  ++this.pos\n  if (octal) {\n    if (this.strict) this.raise(this.pos - 2, \"Octal literal in strict mode\")\n    this.pos += octal.length - 1\n    return String.fromCharCode(parseInt(octal, 8))\n  } else {\n    switch (ch) {\n    case 110: return \"\\n\"; // 'n' -> '\\n'\n    case 114: return \"\\r\"; // 'r' -> '\\r'\n    case 120: return String.fromCharCode(this.readHexChar(2)); // 'x'\n    case 117: return codePointToString(this.readCodePoint()); // 'u'\n    case 116: return \"\\t\"; // 't' -> '\\t'\n    case 98: return \"\\b\"; // 'b' -> '\\b'\n    case 118: return \"\\u000b\"; // 'v' -> '\\u000b'\n    case 102: return \"\\f\"; // 'f' -> '\\f'\n    case 48: return \"\\0\"; // 0 -> '\\0'\n    case 13: if (this.input.charCodeAt(this.pos) === 10) ++this.pos; // '\\r\\n'\n    case 10: // ' \\n'\n      if (this.options.locations) { this.lineStart = this.pos; ++this.curLine }\n      return \"\"\n    default: return String.fromCharCode(ch)\n    }\n  }\n}\n\n// Used to read character escape sequences ('\\x', '\\u', '\\U').\n\npp.readHexChar = function(len) {\n  let n = this.readInt(16, len)\n  if (n === null) this.raise(this.start, \"Bad character escape sequence\")\n  return n\n}\n\n// Used to signal to callers of `readWord1` whether the word\n// contained any escape sequences. This is needed because words with\n// escape sequences must not be interpreted as keywords.\n\nvar containsEsc\n\n// Read an identifier, and return it as a string. Sets `containsEsc`\n// to whether the word contained a '\\u' escape.\n//\n// Incrementally adds only escaped chars, adding other chunks as-is\n// as a micro-optimization.\n\npp.readWord1 = function() {\n  containsEsc = false\n  let word = \"\", first = true, chunkStart = this.pos\n  let astral = this.options.ecmaVersion >= 6\n  while (this.pos < this.input.length) {\n    let ch = this.fullCharCodeAtPos()\n    if (isIdentifierChar(ch, astral)) {\n      this.pos += ch <= 0xffff ? 1 : 2\n    } else if (ch === 92) { // \"\\\"\n      containsEsc = true\n      word += this.input.slice(chunkStart, this.pos)\n      let escStart = this.pos\n      if (this.input.charCodeAt(++this.pos) != 117) // \"u\"\n        this.raise(this.pos, \"Expecting Unicode escape sequence \\\\uXXXX\")\n      ++this.pos\n      let esc = this.readCodePoint()\n      if (!(first ? isIdentifierStart : isIdentifierChar)(esc, astral))\n        this.raise(escStart, \"Invalid Unicode escape\")\n      word += codePointToString(esc)\n      chunkStart = this.pos\n    } else {\n      break\n    }\n    first = false\n  }\n  return word + this.input.slice(chunkStart, this.pos)\n}\n\n// Read an identifier or keyword token. Will check for reserved\n// words when necessary.\n\npp.readWord = function() {\n  let word = this.readWord1()\n  let type = tt.name\n  if ((this.options.ecmaVersion >= 6 || !containsEsc) && this.isKeyword(word))\n    type = keywordTypes[word]\n  return this.finishToken(type, word)\n}\n"]}