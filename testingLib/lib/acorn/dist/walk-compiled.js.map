{"version":3,"sources":["/home/jared/Desktop/funCode/node_modules/acorn/dist/walk.js"],"names":[],"mappings":"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","file":"walk-compiled.js","sourcesContent":["(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}(g.acorn || (g.acorn = {})).walk = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){\n\"use strict\";\n\nvar _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } };\n\n// AST walker module for Mozilla Parser API compatible trees\n\n// A simple walk is one where you simply specify callbacks to be\n// called on specific nodes. The last two arguments are optional. A\n// simple use would be\n//\n//     walk.simple(myTree, {\n//         Expression: function(node) { ... }\n//     });\n//\n// to do something with all expressions. All Parser API node types\n// can be used to identify node types, as well as Expression,\n// Statement, and ScopeBody, which denote categories of nodes.\n//\n// The base argument can be used to pass a custom (recursive)\n// walker, and state can be used to give this walked an initial\n// state.\n\nexports.simple = simple;\n\n// An ancestor walk builds up an array of ancestor nodes (including\n// the current node) and passes them to the callback as the state parameter.\nexports.ancestor = ancestor;\n\n// A recursive walk is one where your functions override the default\n// walkers. They can modify and replace the state parameter that's\n// threaded through the walk, and can opt how and whether to walk\n// their child nodes (by calling their third argument on these\n// nodes).\nexports.recursive = recursive;\n\n// Find a node with a given start, end, and type (all are optional,\n// null can be used as wildcard). Returns a {node, state} object, or\n// undefined when it doesn't find a matching node.\nexports.findNodeAt = findNodeAt;\n\n// Find the innermost node of a given type that contains the given\n// position. Interface similar to findNodeAt.\nexports.findNodeAround = findNodeAround;\n\n// Find the outermost matching node after a given position.\nexports.findNodeAfter = findNodeAfter;\n\n// Find the outermost matching node before a given position.\nexports.findNodeBefore = findNodeBefore;\n\n// Used to create a custom walker. Will fill in all missing node\n// type properties with the defaults.\nexports.make = make;\nexports.__esModule = true;\n\nfunction simple(node, visitors, base, state) {\n  if (!base) base = exports.base;(function c(node, st, override) {\n    var type = override || node.type,\n        found = visitors[type];\n    base[type](node, st, c);\n    if (found) found(node, st);\n  })(node, state);\n}\n\nfunction ancestor(node, visitors, base, state) {\n  if (!base) base = exports.base;\n  if (!state) state = [];(function c(node, st, override) {\n    var type = override || node.type,\n        found = visitors[type];\n    if (node != st[st.length - 1]) {\n      st = st.slice();\n      st.push(node);\n    }\n    base[type](node, st, c);\n    if (found) found(node, st);\n  })(node, state);\n}\n\nfunction recursive(node, state, funcs, base) {\n  var visitor = funcs ? exports.make(funcs, base) : base;(function c(node, st, override) {\n    visitor[override || node.type](node, st, c);\n  })(node, state);\n}\n\nfunction makeTest(test) {\n  if (typeof test == \"string\") {\n    return function (type) {\n      return type == test;\n    };\n  } else if (!test) {\n    return function () {\n      return true;\n    };\n  } else {\n    return test;\n  }\n}\n\nvar Found = function Found(node, state) {\n  _classCallCheck(this, Found);\n\n  this.node = node;this.state = state;\n};\n\nfunction findNodeAt(node, start, end, test, base, state) {\n  test = makeTest(test);\n  if (!base) base = exports.base;\n  try {\n    ;(function c(node, st, override) {\n      var type = override || node.type;\n      if ((start == null || node.start <= start) && (end == null || node.end >= end)) base[type](node, st, c);\n      if (test(type, node) && (start == null || node.start == start) && (end == null || node.end == end)) throw new Found(node, st);\n    })(node, state);\n  } catch (e) {\n    if (e instanceof Found) {\n      return e;\n    }throw e;\n  }\n}\n\nfunction findNodeAround(node, pos, test, base, state) {\n  test = makeTest(test);\n  if (!base) base = exports.base;\n  try {\n    ;(function c(node, st, override) {\n      var type = override || node.type;\n      if (node.start > pos || node.end < pos) {\n        return;\n      }base[type](node, st, c);\n      if (test(type, node)) throw new Found(node, st);\n    })(node, state);\n  } catch (e) {\n    if (e instanceof Found) {\n      return e;\n    }throw e;\n  }\n}\n\nfunction findNodeAfter(node, pos, test, base, state) {\n  test = makeTest(test);\n  if (!base) base = exports.base;\n  try {\n    ;(function c(node, st, override) {\n      if (node.end < pos) {\n        return;\n      }var type = override || node.type;\n      if (node.start >= pos && test(type, node)) throw new Found(node, st);\n      base[type](node, st, c);\n    })(node, state);\n  } catch (e) {\n    if (e instanceof Found) {\n      return e;\n    }throw e;\n  }\n}\n\nfunction findNodeBefore(node, pos, test, base, state) {\n  test = makeTest(test);\n  if (!base) base = exports.base;\n  var max = undefined;(function c(node, st, override) {\n    if (node.start > pos) {\n      return;\n    }var type = override || node.type;\n    if (node.end <= pos && (!max || max.node.end < node.end) && test(type, node)) max = new Found(node, st);\n    base[type](node, st, c);\n  })(node, state);\n  return max;\n}\n\nfunction make(funcs, base) {\n  if (!base) base = exports.base;\n  var visitor = {};\n  for (var type in base) visitor[type] = base[type];\n  for (var type in funcs) visitor[type] = funcs[type];\n  return visitor;\n}\n\nfunction skipThrough(node, st, c) {\n  c(node, st);\n}\nfunction ignore(_node, _st, _c) {}\n\n// Node walkers.\n\nvar base = {};\n\nexports.base = base;\nbase.Program = base.BlockStatement = function (node, st, c) {\n  for (var i = 0; i < node.body.length; ++i) {\n    c(node.body[i], st, \"Statement\");\n  }\n};\nbase.Statement = skipThrough;\nbase.EmptyStatement = ignore;\nbase.ExpressionStatement = base.ParenthesizedExpression = function (node, st, c) {\n  return c(node.expression, st, \"Expression\");\n};\nbase.IfStatement = function (node, st, c) {\n  c(node.test, st, \"Expression\");\n  c(node.consequent, st, \"Statement\");\n  if (node.alternate) c(node.alternate, st, \"Statement\");\n};\nbase.LabeledStatement = function (node, st, c) {\n  return c(node.body, st, \"Statement\");\n};\nbase.BreakStatement = base.ContinueStatement = ignore;\nbase.WithStatement = function (node, st, c) {\n  c(node.object, st, \"Expression\");\n  c(node.body, st, \"Statement\");\n};\nbase.SwitchStatement = function (node, st, c) {\n  c(node.discriminant, st, \"Expression\");\n  for (var i = 0; i < node.cases.length; ++i) {\n    var cs = node.cases[i];\n    if (cs.test) c(cs.test, st, \"Expression\");\n    for (var j = 0; j < cs.consequent.length; ++j) {\n      c(cs.consequent[j], st, \"Statement\");\n    }\n  }\n};\nbase.ReturnStatement = base.YieldExpression = function (node, st, c) {\n  if (node.argument) c(node.argument, st, \"Expression\");\n};\nbase.ThrowStatement = base.SpreadElement = base.RestElement = function (node, st, c) {\n  return c(node.argument, st, \"Expression\");\n};\nbase.TryStatement = function (node, st, c) {\n  c(node.block, st, \"Statement\");\n  if (node.handler) c(node.handler.body, st, \"ScopeBody\");\n  if (node.finalizer) c(node.finalizer, st, \"Statement\");\n};\nbase.WhileStatement = base.DoWhileStatement = function (node, st, c) {\n  c(node.test, st, \"Expression\");\n  c(node.body, st, \"Statement\");\n};\nbase.ForStatement = function (node, st, c) {\n  if (node.init) c(node.init, st, \"ForInit\");\n  if (node.test) c(node.test, st, \"Expression\");\n  if (node.update) c(node.update, st, \"Expression\");\n  c(node.body, st, \"Statement\");\n};\nbase.ForInStatement = base.ForOfStatement = function (node, st, c) {\n  c(node.left, st, \"ForInit\");\n  c(node.right, st, \"Expression\");\n  c(node.body, st, \"Statement\");\n};\nbase.ForInit = function (node, st, c) {\n  if (node.type == \"VariableDeclaration\") c(node, st);else c(node, st, \"Expression\");\n};\nbase.DebuggerStatement = ignore;\n\nbase.FunctionDeclaration = function (node, st, c) {\n  return c(node, st, \"Function\");\n};\nbase.VariableDeclaration = function (node, st, c) {\n  for (var i = 0; i < node.declarations.length; ++i) {\n    var decl = node.declarations[i];\n    if (decl.init) c(decl.init, st, \"Expression\");\n  }\n};\n\nbase.Function = function (node, st, c) {\n  return c(node.body, st, \"ScopeBody\");\n};\nbase.ScopeBody = function (node, st, c) {\n  return c(node, st, \"Statement\");\n};\n\nbase.Expression = skipThrough;\nbase.ThisExpression = base.Super = base.MetaProperty = ignore;\nbase.ArrayExpression = base.ArrayPattern = function (node, st, c) {\n  for (var i = 0; i < node.elements.length; ++i) {\n    var elt = node.elements[i];\n    if (elt) c(elt, st, \"Expression\");\n  }\n};\nbase.ObjectExpression = base.ObjectPattern = function (node, st, c) {\n  for (var i = 0; i < node.properties.length; ++i) {\n    c(node.properties[i], st);\n  }\n};\nbase.FunctionExpression = base.ArrowFunctionExpression = base.FunctionDeclaration;\nbase.SequenceExpression = base.TemplateLiteral = function (node, st, c) {\n  for (var i = 0; i < node.expressions.length; ++i) {\n    c(node.expressions[i], st, \"Expression\");\n  }\n};\nbase.UnaryExpression = base.UpdateExpression = function (node, st, c) {\n  c(node.argument, st, \"Expression\");\n};\nbase.BinaryExpression = base.AssignmentExpression = base.AssignmentPattern = base.LogicalExpression = function (node, st, c) {\n  c(node.left, st, \"Expression\");\n  c(node.right, st, \"Expression\");\n};\nbase.ConditionalExpression = function (node, st, c) {\n  c(node.test, st, \"Expression\");\n  c(node.consequent, st, \"Expression\");\n  c(node.alternate, st, \"Expression\");\n};\nbase.NewExpression = base.CallExpression = function (node, st, c) {\n  c(node.callee, st, \"Expression\");\n  if (node.arguments) for (var i = 0; i < node.arguments.length; ++i) {\n    c(node.arguments[i], st, \"Expression\");\n  }\n};\nbase.MemberExpression = function (node, st, c) {\n  c(node.object, st, \"Expression\");\n  if (node.computed) c(node.property, st, \"Expression\");\n};\nbase.ExportNamedDeclaration = base.ExportDefaultDeclaration = function (node, st, c) {\n  return c(node.declaration, st);\n};\nbase.ImportDeclaration = function (node, st, c) {\n  for (var i = 0; i < node.specifiers.length; i++) {\n    c(node.specifiers[i], st);\n  }\n};\nbase.ImportSpecifier = base.ImportDefaultSpecifier = base.ImportNamespaceSpecifier = base.Identifier = base.Literal = ignore;\n\nbase.TaggedTemplateExpression = function (node, st, c) {\n  c(node.tag, st, \"Expression\");\n  c(node.quasi, st);\n};\nbase.ClassDeclaration = base.ClassExpression = function (node, st, c) {\n  if (node.superClass) c(node.superClass, st, \"Expression\");\n  for (var i = 0; i < node.body.body.length; i++) {\n    c(node.body.body[i], st);\n  }\n};\nbase.MethodDefinition = base.Property = function (node, st, c) {\n  if (node.computed) c(node.key, st, \"Expression\");\n  c(node.value, st, \"Expression\");\n};\nbase.ComprehensionExpression = function (node, st, c) {\n  for (var i = 0; i < node.blocks.length; i++) {\n    c(node.blocks[i].right, st, \"Expression\");\n  }c(node.body, st, \"Expression\");\n};\n\n},{}]},{},[1])(1)\n});"]}