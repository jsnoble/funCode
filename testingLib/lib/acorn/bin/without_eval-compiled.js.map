{"version":3,"sources":["/home/jared/Desktop/funCode/node_modules/acorn/bin/without_eval"],"names":[],"mappings":";;AAEA,IAAI,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAA;;AAEtB,IAAI,QAAQ,GAAG,EAAE,CAAC,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC,eAAe,CAAC,EAAE,MAAM,CAAC,CAAA;AACxE,IAAI,KAAK,GAAG,OAAO,CAAC,eAAe,CAAC;IAAE,IAAI,GAAG,OAAO,CAAC,cAAc,CAAC,CAAA;;AAEpE,IAAI,GAAG,GAAG,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAA;AAC/B,IAAI,QAAQ,GAAG,EAAE;IAAE,IAAI,GAAG,EAAE,CAAA;;AAE5B,IAAI,QAAQ,CAAA;;AAEZ,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE;AACf,qBAAmB,EAAE,6BAAS,IAAI,EAAE;AAClC,QAAI,IAAI,CAAC,EAAE,CAAC,IAAI,IAAI,eAAe,EAAE;AACnC,cAAQ,GAAG,IAAI,CAAA;AACf,cAAQ,CAAC,IAAI,CAAC,EAAC,IAAI,EAAE,2CAA2C,EAAE,IAAI,EAAE,IAAI,CAAC,KAAK,EAAE,EAAE,EAAE,IAAI,CAAC,GAAG,EAAC,CAAC,CAAA;KACnG;GACF;AACD,kBAAgB,EAAE,0BAAS,IAAI,EAAE;AAC/B,QAAI,CAAC,UAAU,CAAC,OAAO,CAAC,UAAS,IAAI,EAAE;AACrC,UAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,gBAAgB,IACnC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,IAAI,eAAe,EAC3C,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;KACxB,CAAC,CAAA;GACH;CACF,CAAC,CAAA;;AAEF,IAAI,OAAO,GAAG,EAAE,CAAA;AAChB,IAAI,MAAM,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,QAAQ,CAAC,GAAG,CAAC,GAAG,mCAAmC,GAC9E,8FAA8F,GAC9F,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,CAC/B,AAAC,IAAI,QAAQ,CAAC,YAAY,EAAE,MAAM,CAAC,CAAE,OAAO,CAAC,CAAA;;AAE9C,IAAI,CAAC,OAAO,CAAC,UAAU,IAAI,EAAE,CAAC,EAAE;AAC9B,UAAQ,CAAC,IAAI,CAAC,EAAC,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,KAAK,EAAE,EAAE,EAAE,IAAI,CAAC,GAAG,EAAC,CAAC,CAAA;CAC7E,CAAC,CAAA;;AAEF,IAAI,MAAM,GAAG,EAAE;IAAE,GAAG,GAAG,CAAC,CAAA;AACxB,QAAQ,CAAC,IAAI,CAAC,UAAS,CAAC,EAAE,CAAC,EAAE;AAAE,SAAO,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,IAAI,CAAA;CAAE,CAAC,CAAA;AACxD,QAAQ,CAAC,OAAO,CAAC,UAAS,OAAO,EAAE;AACjC,QAAM,IAAI,QAAQ,CAAC,KAAK,CAAC,GAAG,EAAE,OAAO,CAAC,IAAI,CAAC,CAAA;AAC3C,QAAM,IAAI,OAAO,CAAC,IAAI,CAAA;AACtB,KAAG,GAAG,OAAO,CAAC,EAAE,CAAA;CACjB,CAAC,CAAA;AACF,MAAM,IAAI,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;;AAE7B,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAA","file":"without_eval-compiled.js","sourcesContent":["#!/usr/bin/env node\n\nvar fs = require(\"fs\")\n\nvar acornSrc = fs.readFileSync(require.resolve(\"../dist/acorn\"), \"utf8\")\nvar acorn = require(\"../dist/acorn\"), walk = require(\"../dist/walk\")\n\nvar ast = acorn.parse(acornSrc)\nvar touchups = [], uses = []\n\nvar makePred\n\nwalk.simple(ast, {\n  FunctionDeclaration: function(node) {\n    if (node.id.name == \"makePredicate\") {\n      makePred = node\n      touchups.push({text: \"// Removed to create an eval-free library\", from: node.start, to: node.end})\n    }\n  },\n  ObjectExpression: function(node) {\n    node.properties.forEach(function(prop) {\n      if (prop.value.type == \"CallExpression\" &&\n          prop.value.callee.name == \"makePredicate\")\n        uses.push(prop.value)\n    })\n  }\n})\n\nvar results = []\nvar dryRun = acornSrc.slice(0, makePred.end) + \"; makePredicate = (function(mp) {\" +\n    \"return function(words) { var r = mp(words); predicates.push(r); return r }})(makePredicate);\" +\n    acornSrc.slice(makePred.end)\n;(new Function(\"predicates\", dryRun))(results)\n\nuses.forEach(function (node, i) {\n  touchups.push({text: results[i].toString(), from: node.start, to: node.end})\n})\n\nvar result = \"\", pos = 0\ntouchups.sort(function(a, b) { return a.from - b.from })\ntouchups.forEach(function(touchup) {\n  result += acornSrc.slice(pos, touchup.from)\n  result += touchup.text\n  pos = touchup.to\n})\nresult += acornSrc.slice(pos)\n\nprocess.stdout.write(result)\n"]}